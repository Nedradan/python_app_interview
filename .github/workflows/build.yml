name: Build and Push Docker Image on PR

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build-and-push:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.CICD_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: pr-${{ github.event.pull_request.number }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Output image URI
      run: |
        echo "Pushed Docker image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:pr-${{ github.event.pull_request.number }}-${{ github.sha }}"

  cleanup-on-pr-close:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.CICD_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        audience: sts.amazonaws.com

    - name: Delete old PR images from ECR
      env:
        EECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: pr-${{ github.event.pull_request.number }}-*
      run: |
        aws ecr batch-delete-image --repository-name $ECR_REPOSITORY \
          --image-ids imageTag=${IMAGE_TAG} || echo "No images found for deletion"